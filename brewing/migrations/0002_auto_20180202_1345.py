# -*- coding: utf-8 -*-
# Generated by Django 1.11.9 on 2018-02-02 13:45
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('brewing', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('version', models.PositiveSmallIntegerField(default=1, editable=False, help_text='XML version', verbose_name='version')),
                ('slug', models.SlugField(blank=True, max_length=100)),
                ('cdt', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('mdt', models.DateTimeField(auto_now=True, verbose_name='modified')),
                ('boil_size', models.DecimalField(decimal_places=9, help_text='The pre-boil volume used in this \n            particular instance for this equipment setup. Note that this may \n            be a calculated value depending on the CALC_BOIL_VOLUME parameter.', max_digits=14, verbose_name='boil size')),
                ('batch_size', models.DecimalField(decimal_places=9, help_text='The target volume of the batch at the \n            start of fermentation.', max_digits=14, verbose_name='batch size')),
                ('tun_volume', models.DecimalField(blank=True, decimal_places=9, help_text='Volume of the \n            mash tun in liters. This parameter can be used to calculate if a \n            particular mash and grain profile will fit in the mash tun. It may also \n            be used for thermal calculations in the case of a partially full \n            mash tun.', max_digits=14, null=True, verbose_name='tun volume (litres)')),
                ('tun_weight', models.DecimalField(blank=True, decimal_places=9, help_text='Weight of the \n            mash tun in kilograms. Used primarily to calculate the thermal parameters \n            of the mash tun – in conjunction with the volume and specific heat.', max_digits=14, null=True, verbose_name='tun weight (kilos)')),
                ('tun_specific_heat', models.DecimalField(blank=True, decimal_places=9, help_text='The \n            specific heat of the mash tun which is usually a function of the material \n            it is made of. Typical ranges are 0.1-0.25 for metal and 0.2-0.5 for \n            plastic materials.', max_digits=14, null=True, verbose_name='tun specific heat (cal/(g*K))')),
                ('top_up_water', models.DecimalField(blank=True, decimal_places=9, help_text='The amount of top \n            up water normally added just prior to starting fermentation. Usually \n            used for extract brewing.', max_digits=14, null=True, verbose_name='top-up water')),
                ('trub_chiller_loss', models.DecimalField(blank=True, decimal_places=9, help_text='The amount of wort \n            normally lost during transition from the boiler to the fermentation vessel. \n            Includes both unusable wort due to trub and wort lost to the chiller and \n            transfer systems.', max_digits=14, null=True, verbose_name='trub chiller loss')),
                ('evap_rate', models.DecimalField(blank=True, decimal_places=9, help_text='The \n            percentage of wort lost to evaporation per hour of the boil.', max_digits=14, null=True, verbose_name='evaporation rate (% per hour)')),
                ('boil_time', models.DecimalField(blank=True, decimal_places=9, help_text='The normal amount of \n            time one boils for this equipment setup. This can be used with the \n            evaporation rate to calculate the evaporation loss.', max_digits=14, null=True, verbose_name='boil time (hours,minutes)')),
                ('calc_boil_volume', models.BooleanField(default=False, help_text='Flag denoting that the program should calculate the boil size. \n            Flag may be True or False. If set then the boil size should match this value.', verbose_name='calculate boil volume')),
                ('lauter_deadspace', models.DecimalField(blank=True, decimal_places=9, help_text='Amount lost to \n            the lauter tun and equipment associated with the lautering process.', max_digits=14, null=True, verbose_name='lauter deadspace (litres)')),
                ('top_up_kettle', models.DecimalField(blank=True, decimal_places=9, help_text='Amount normally added \n            to the boil kettle before the boil.', max_digits=14, null=True, verbose_name='kettle top-up water (litres)')),
                ('hop_utilization', models.DecimalField(blank=True, decimal_places=9, help_text='Large batch hop \n            utilization. This value should be 100% for batches less than 20 gallons, \n            but may be higher (200% or more) for very large batch equipment.', max_digits=14, null=True, verbose_name='hop utilization %')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('display_boil_size', models.CharField(blank=True, help_text='The pre-boil volume normally \n            used for a batch of this size shown in display volume units such \n            as “5.5 gal”', max_length=50, null=True, verbose_name='display boil size')),
                ('display_batch_size', models.CharField(blank=True, help_text='The target volume of the batch \n            at the start of fermentation in display volume units such as “5.0 gal”', max_length=50, null=True, verbose_name='display batch size')),
                ('display_tun_volume', models.CharField(blank=True, help_text='Volume of the mash tun in display \n            units such as “10.0 gal” or “20.0 l”', max_length=50, null=True, verbose_name='display tun volume')),
                ('display_tun_weight', models.CharField(blank=True, help_text='Weight of the mash tun in display \n            units such as “3.0 kg” or “6.0 lb”', max_length=50, null=True, verbose_name='display tun weight')),
                ('display_top_up_water', models.CharField(blank=True, help_text='The amount of top up water \n            normally added just prior to starting fermentation in display volume \n            such as “1.0 gal”', max_length=50, null=True, verbose_name='display top up water')),
                ('display_trub_chiller_loss', models.CharField(blank=True, help_text='The amount of wort \n            normally lost during transition from the boiler to the fermentation \n            vessel. Includes both unusable wort due to trub and wort lost to the \n            chiller and transfer systems. Expressed in user units - Ex: “1.5 qt”', max_length=50, null=True, verbose_name='display trub chiller loss')),
                ('display_lauter_deadspace', models.CharField(blank=True, help_text='Amount lost to the \n            lauter tun and equipment associated with the lautering process. \n            Ex: “2.0 gal” or “1.0 l”', max_length=50, null=True, verbose_name='display lauter deadspace')),
                ('display_top_up_kettle', models.CharField(blank=True, help_text='Amount normally \n            added to the boil kettle before the boil. Ex: “1.0 gal”', max_length=50, null=True, verbose_name='display top up kettle')),
                ('modified_by', models.ForeignKey(blank=True, help_text='Modified by', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='brewing_equipment_modified_by_set', to=settings.AUTH_USER_MODEL)),
                ('registered_by', models.ForeignKey(blank=True, help_text='Registered by', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='brewing_equipment_registered_by_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Fermentable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('version', models.PositiveSmallIntegerField(default=1, editable=False, help_text='XML version', verbose_name='version')),
                ('slug', models.SlugField(blank=True, max_length=100)),
                ('cdt', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('mdt', models.DateTimeField(auto_now=True, verbose_name='modified')),
                ('ferm_type', models.CharField(choices=[('grain', 'Grain'), ('sugar', 'Sugar'), ('extract', 'Extract'), ('dry extract', 'Dry extract'), ('adjunct', 'Adjunct')], max_length=12, verbose_name='fermentable type')),
                ('amount', models.DecimalField(decimal_places=9, help_text='Weight of the fermentable, extract or sugar in Kilograms.', max_digits=14, verbose_name='amount')),
                ('ferm_yield', models.DecimalField(decimal_places=9, help_text='Percent dry yield (fine grain) \n            for the grain, or the raw yield by weight if this is an \n            extract adjunct or sugar.', max_digits=14, verbose_name='yield percentage')),
                ('color', models.DecimalField(decimal_places=9, help_text='The color of the item in Lovibond Units \n            (SRM for liquid extracts).', max_digits=14, verbose_name='color')),
                ('add_after_boil', models.BooleanField(default=False, help_text='May be TRUE if this item is normally added after \n            the boil. The default value is FALSE since most grains are added \n            during the mash or boil.', verbose_name='add after boil')),
                ('origin', models.CharField(blank=True, max_length=100, null=True, verbose_name='origin country')),
                ('supplier', models.TextField(blank=True, null=True, verbose_name='supplier')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('coarse_fine_diff', models.DecimalField(blank=True, decimal_places=9, help_text='Percent difference \n            between the coarse grain yield and fine grain yield.  Only appropriate for \n            a "Grain" or "Adjunct" type, otherwise this value is ignored.', max_digits=14, null=True, verbose_name='coarse/fine percentage')),
                ('moisture', models.DecimalField(blank=True, decimal_places=9, help_text='Percent \n            moisture in the grain. Only appropriate for a "Grain" or "Adjunct" type, \n            otherwise this value is ignored.', max_digits=14, null=True, verbose_name='moisture percentage')),
                ('diastatic_power', models.DecimalField(blank=True, decimal_places=9, help_text='The diastatic power \n            of the grain as measured in "Lintner" units. Only appropriate for a \n            "Grain" or "Adjunct" type, otherwise this value is ignored.', max_digits=14, null=True, verbose_name='diastatic power')),
                ('protein', models.DecimalField(blank=True, decimal_places=9, help_text='The percent \n            protein in the grain. Only appropriate for a "Grain" or "Adjunct" type, \n            otherwise this value is ignored.', max_digits=14, null=True, verbose_name='protein percentage')),
                ('max_in_batch', models.DecimalField(blank=True, decimal_places=9, help_text='The recommended \n            maximum percentage (by weight) this ingredient should represent in a \n            batch of beer.', max_digits=14, null=True, verbose_name='max percentage per batch')),
                ('recommend_mash', models.NullBooleanField(default=False, help_text='True if it is recommended the grain \n            be mashed, False if it can be steeped. A value of True is only appropriate \n            for a "Grain" or "Adjunct" types. The default value is False. Note that \n            this does NOT indicate whether the grain is mashed or not – it is only \n            a recommendation used in recipe formulation.', verbose_name='recommended mash')),
                ('ibu_gal_per_lb', models.DecimalField(blank=True, decimal_places=9, help_text='For hopped extracts \n            only - an estimate of the number of IBUs per pound of extract in a gallon \n            of water. To convert to IBUs we multiply this number by the "Amount" \n            field (in pounds) and divide by the number of gallons in the batch. \n            Based on a sixty minute boil. Only suitable for use with an "Extract" type, \n            otherwise this value is ignored.', max_digits=14, null=True, verbose_name='bitterness (IBU*gal/lb)')),
                ('display_amount', models.CharField(blank=True, help_text='The amount of fermentables in this record along \n            with the units formatted for easy display in the current user defined units. \n            For example “1.5 lbs” or “2.1 kg”.', max_length=50, null=True, verbose_name='display amount')),
                ('potential', models.DecimalField(blank=True, decimal_places=9, help_text='The yield of the fermentable converted \n            to specific gravity units for display. For example “1.036” or “1.040” \n            might be valid potentials.', max_digits=14, null=True, verbose_name='potential')),
                ('inventory', models.CharField(blank=True, help_text='Amount in inventory for this item along with the units \n            – for example “10.0 lb”', max_length=50, null=True, verbose_name='inventory')),
                ('display_color', models.CharField(blank=True, help_text='Color in user defined color units along with the \n            unit identified – for example “200L” or “40 ebc', max_length=50, null=True, verbose_name='display color')),
                ('modified_by', models.ForeignKey(blank=True, help_text='Modified by', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='brewing_fermentable_modified_by_set', to=settings.AUTH_USER_MODEL)),
                ('registered_by', models.ForeignKey(blank=True, help_text='Registered by', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='brewing_fermentable_registered_by_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Hop',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('version', models.PositiveSmallIntegerField(default=1, editable=False, help_text='XML version', verbose_name='version')),
                ('slug', models.SlugField(blank=True, max_length=100)),
                ('cdt', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('mdt', models.DateTimeField(auto_now=True, verbose_name='modified')),
                ('alpha', models.DecimalField(decimal_places=9, help_text='Percent alpha of hops \n            - for example "5.5" represents 5.5% alpha', max_digits=14, verbose_name='alpha percentage')),
                ('amount', models.DecimalField(decimal_places=9, help_text='Weight in Kilograms of the hops used in the recipe.', max_digits=14, verbose_name='amount')),
                ('use', models.CharField(choices=[('boil', 'Boil'), ('dry hop', 'Dry Hop'), ('mash', 'Mash'), ('first wort', 'First Wort'), ('aroma', 'Aroma')], help_text='Note that Aroma and Dry Hop do not contribute to the \n            bitterness of the beer while the others do.  Aroma hops are added \n            after the boil and do not contribute substantially to beer \n            bitterness.', max_length=12, verbose_name='usage')),
                ('time', models.DecimalField(decimal_places=9, help_text='The time as measured in minutes. Meaning is dependent \n            on the “usage” field. For “Boil” this is the boil time.  For “Mash” \n            this is the mash time. For “First Wort” this is the boil time. \n            For “Aroma” this is the steep time. For “Dry Hop” this is the amount \n            of time to dry hop.', max_digits=14, verbose_name='time')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('hop_type', models.CharField(blank=True, choices=[('bittering', 'Bittering'), ('aroma', 'Aroma'), ('both', 'Both')], max_length=12, null=True, verbose_name='hop type')),
                ('form', models.CharField(blank=True, choices=[('pellet', 'Pellet'), ('plug', 'Plug'), ('leaf', 'Leaf')], max_length=12, null=True, verbose_name='hop form')),
                ('beta', models.DecimalField(blank=True, decimal_places=9, help_text='Hop beta percentage \n            - for example "4.4" denotes 4.4 % beta', max_digits=14, null=True, verbose_name='beta percentage')),
                ('hsi', models.DecimalField(blank=True, decimal_places=9, help_text='Hop Stability Index - defined as the percentage \n            of hop alpha lost in 6 months of storage', max_digits=14, null=True, verbose_name='HSI')),
                ('origin', models.CharField(blank=True, max_length=100, null=True, verbose_name='origin')),
                ('substitutes', models.TextField(blank=True, help_text='Substitutes that can be used for this hops', null=True, verbose_name='substitutes')),
                ('humulene', models.DecimalField(blank=True, decimal_places=9, max_digits=14, null=True, verbose_name='humulene percentage')),
                ('caryophyllene', models.DecimalField(blank=True, decimal_places=9, max_digits=14, null=True, verbose_name='caryophyllene percentage')),
                ('cohumulone', models.DecimalField(blank=True, decimal_places=9, max_digits=14, null=True, verbose_name='cohumulone percentage')),
                ('myrcene', models.DecimalField(blank=True, decimal_places=9, max_digits=14, null=True, verbose_name='myrcene percentage')),
                ('display_amount', models.CharField(blank=True, help_text='The amount of hops in this record \n            along with the units formatted for easy display in the current user \n            defined units. For example “100 g” or “1.5 oz”.', max_length=50, null=True, verbose_name='display amount')),
                ('inventory', models.CharField(blank=True, help_text='Amount in inventory for this item along with the units \n            – for example “10.0 oz.”', max_length=50, null=True, verbose_name='inventory')),
                ('display_time', models.CharField(blank=True, help_text='Time displayed in minutes for all uses except for the dry hop \n            which is in days. For example “60 min”, “3 days”.', max_length=50, null=True, verbose_name='display time')),
                ('modified_by', models.ForeignKey(blank=True, help_text='Modified by', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='brewing_hop_modified_by_set', to=settings.AUTH_USER_MODEL)),
                ('registered_by', models.ForeignKey(blank=True, help_text='Registered by', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='brewing_hop_registered_by_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MashProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('version', models.PositiveSmallIntegerField(default=1, editable=False, help_text='XML version', verbose_name='version')),
                ('slug', models.SlugField(blank=True, max_length=100)),
                ('cdt', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('mdt', models.DateTimeField(auto_now=True, verbose_name='modified')),
                ('grain_temp', models.DecimalField(decimal_places=9, help_text='The temperature of the grain before \n            adding it to the mash in degrees Celsius.', max_digits=14, verbose_name='grain temperature')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('tun_temp', models.DecimalField(blank=True, decimal_places=9, help_text='Grain tun \n            temperature – may be used to adjust the infusion temperature for \n            equipment if the program supports it. Measured in degrees C.', max_digits=14, null=True, verbose_name='tun temperature')),
                ('sparge_temp', models.DecimalField(blank=True, decimal_places=9, help_text='Temperature of the sparge water used in degrees Celsius.', max_digits=14, null=True, verbose_name='sparge temperature')),
                ('ph', models.DecimalField(blank=True, decimal_places=9, help_text='PH of the sparge.', max_digits=14, null=True, verbose_name='sparge PH')),
                ('tun_weight', models.DecimalField(blank=True, decimal_places=9, help_text='Weight of the mash tun in kilograms', max_digits=14, null=True, verbose_name='tun weight (kilos)')),
                ('tun_specific_heat', models.DecimalField(blank=True, decimal_places=9, help_text='Specific heat of the tun material in calories per gram-degree C.', max_digits=14, null=True, verbose_name='tun specific heat')),
                ('equip_adjust', models.BooleanField(default=False, help_text='If True, mash infusion and decoction calculations should take \n            into account the temperature effects of the equipment (tun specific heat and \n            tun weight). If False, the tun is assumed to be pre-heated. Default is False.', verbose_name='adjust from equipment')),
                ('display_grain_temp', models.CharField(blank=True, help_text='Grain temperature in user display units \n            with the units. For example: “72 F”.', max_length=50, null=True, verbose_name='display grain temperature')),
                ('display_tun_temp', models.CharField(blank=True, help_text='Tun temperature in user display units. \n            For example “68 F”', max_length=50, null=True, verbose_name='display tun temperature')),
                ('display_sparge_temp', models.CharField(blank=True, help_text='Sparge temperature in user defined units. \n            For example “178 F”', max_length=50, null=True, verbose_name='display sparge temperature')),
                ('display_tun_weight', models.CharField(blank=True, help_text='Tun weight in user defined units \n            – for example “10 lb”', max_length=50, null=True, verbose_name='display tun weight')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MashStep',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('version', models.PositiveSmallIntegerField(default=1, editable=False, help_text='XML version', verbose_name='version')),
                ('slug', models.SlugField(blank=True, max_length=100)),
                ('cdt', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('mdt', models.DateTimeField(auto_now=True, verbose_name='modified')),
                ('mash_type', models.CharField(choices=[('infusion', 'Infusion'), ('temperature', 'Temperature'), ('decoction', 'Decoction')], help_text='May be “Infusion”, “Temperature” or “Decoction” depending \n            on the type of step. Infusion denotes adding hot water, Temperature \n            denotes heating with an outside heat source, and decoction denotes \n            drawing off some mash for boiling.', max_length=12, verbose_name='type')),
                ('infuse_amount', models.DecimalField(blank=True, decimal_places=9, help_text='The volume of \n            water in liters to infuse in this step. Required only for infusion steps, \n            though one may also add water for temperature mash steps. One should \n            not have an infusion amount for decoction steps.', max_digits=14, null=True, verbose_name='infuse amount')),
                ('step_temp', models.DecimalField(decimal_places=9, help_text='The target temperature for this step in degrees Celsius.', max_digits=14, verbose_name='step temperature')),
                ('step_time', models.DecimalField(decimal_places=9, help_text='The number of minutes to spend at this step – i.e. the \n            amount of time we are to hold this particular step temperature.', max_digits=14, verbose_name='step time')),
                ('ramp_time', models.DecimalField(blank=True, decimal_places=9, help_text='Time in minutes to achieve the \n            desired step temperature – useful particularly for temperature mashes where \n            it may take some time to achieve the step temperature.', max_digits=14, null=True, verbose_name='ramp time')),
                ('end_temp', models.DecimalField(blank=True, decimal_places=9, help_text='The temperature you can expect the mash to \n            fall to after a long mash step. Measured in degrees Celsius.', max_digits=14, null=True, verbose_name='end temperature')),
                ('description', models.TextField(blank=True, help_text='Textual description of this step such as \n            “Infuse 4.5 gal of water at 170 F” – may be either generated by \n            the program or input by the user.', null=True, verbose_name='description')),
                ('water_grain_ratio', models.CharField(blank=True, help_text='The total ratio of water to grain \n            for this step AFTER the infusion along with the units, usually expressed \n            in qt/lb or l/kg. Note this value must be consistent with the required \n            infusion amount and amounts added in earlier steps and is only relevant as part \n            of a <MASH> profile. For example “1.5 qt/lb” or “3.0 l/kg”', max_length=50, null=True, verbose_name='water - grain ratio')),
                ('decoction_amt', models.CharField(blank=True, help_text='Calculated volume of mash to decoct. Only applicable \n            for a decoction step. Includes the units as in “7.5 l” or “2.3 gal”', max_length=50, null=True, verbose_name='decoction amount')),
                ('infuse_temp', models.CharField(blank=True, help_text='The calculated infusion temperature based on the current step, grain, \n            and other settings. Applicable only for an infusion step. Includes the units as in \n            “154 F” or “68 C”', max_length=50, null=True, verbose_name='infuse temp')),
                ('display_step_temp', models.CharField(blank=True, help_text='Step temperature in user defined \n            temperature units. For example “154F” or “68 C”', max_length=50, null=True, verbose_name='display step temperature')),
                ('display_infuse_amt', models.CharField(blank=True, help_text='Infusion amount along with the volume \n            units as in “20 l” or “13 qt”', max_length=50, null=True, verbose_name='display infuse amount')),
                ('modified_by', models.ForeignKey(blank=True, help_text='Modified by', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='brewing_mashstep_modified_by_set', to=settings.AUTH_USER_MODEL)),
                ('registered_by', models.ForeignKey(blank=True, help_text='Registered by', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='brewing_mashstep_registered_by_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Misc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('version', models.PositiveSmallIntegerField(default=1, editable=False, help_text='XML version', verbose_name='version')),
                ('slug', models.SlugField(blank=True, max_length=100)),
                ('cdt', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('mdt', models.DateTimeField(auto_now=True, verbose_name='modified')),
                ('misc_type', models.CharField(choices=[('spice', 'Spice'), ('fining', 'Fining'), ('water agent', 'Water agent'), ('herb', 'Herb'), ('flavor', 'Flavor'), ('other', 'Other')], default=4, max_length=12, verbose_name='hop type')),
                ('use', models.CharField(choices=[('boil', 'Boil'), ('mash', 'Mash'), ('primary', 'Primary'), ('secondary', 'Secondary'), ('bottling', 'Bottling')], default=2, max_length=12, verbose_name='hop type')),
                ('time', models.DecimalField(decimal_places=9, help_text='Amount of time the misc was boiled, steeped, mashed, etc in minutes.', max_digits=14, verbose_name='time')),
                ('amount', models.DecimalField(decimal_places=9, help_text='Amount of item used. The default measurements are by weight, \n            but this may be the measurement in volume units if AMOUNT_IS_WEIGHT is set \n            to TRUE for this record. For liquid items this is liters, for solid the  \n            weight is measured in kilograms.', max_digits=14, verbose_name='yield percentage')),
                ('amount_is_weight', models.BooleanField(default=False, help_text='TRUE if the amount measurement is a weight measurement and FALSE if \n            the amount is a volume measurement.', verbose_name='amount is weight')),
                ('use_for', models.TextField(blank=True, help_text='Short description of what the ingredient is used for in text', null=True, verbose_name='use for')),
                ('notes', models.TextField(blank=True, help_text='Detailed notes on the item including usage.', null=True, verbose_name='notes')),
                ('display_amount', models.CharField(blank=True, help_text='The amount of the item in this record along with \n            the units formatted for easy display in the current user defined units. \n            For example “1.5 lbs” or “2.1 kg”.', max_length=50, null=True, verbose_name='display amount')),
                ('inventory', models.CharField(blank=True, help_text='Amount in inventory for this item along with the units \n            – for example “10.0 lb.”', max_length=50, null=True, verbose_name='inventory')),
                ('display_time', models.CharField(blank=True, help_text='Time in appropriate units along with the units \n            as in “10 min” or “3 days”.', max_length=50, null=True, verbose_name='display time')),
                ('modified_by', models.ForeignKey(blank=True, help_text='Modified by', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='brewing_misc_modified_by_set', to=settings.AUTH_USER_MODEL)),
                ('registered_by', models.ForeignKey(blank=True, help_text='Registered by', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='brewing_misc_registered_by_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('version', models.PositiveSmallIntegerField(default=1, editable=False, help_text='XML version', verbose_name='version')),
                ('slug', models.SlugField(blank=True, max_length=100)),
                ('cdt', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('mdt', models.DateTimeField(auto_now=True, verbose_name='modified')),
                ('recipe_type', models.CharField(choices=[('extract', 'Extract'), ('partial mash', 'Partial Mash'), ('all grain', 'All grain')], max_length=12, verbose_name='type')),
                ('brewer', models.CharField(max_length=100, verbose_name='name of brewer')),
                ('asst_brewer', models.CharField(blank=True, max_length=100, null=True, verbose_name='assistant brewer')),
                ('batch_size', models.DecimalField(decimal_places=9, help_text='Target size of the finished batch in liters.', max_digits=14, verbose_name='batch size')),
                ('boil_size', models.DecimalField(decimal_places=9, help_text='Starting size for the main boil of the wort in liters.', max_digits=14, verbose_name='boil size')),
                ('boil_time', models.DecimalField(decimal_places=9, help_text='The total time to boil the wort in minutes.', max_digits=14, verbose_name='boil time')),
                ('efficiency', models.DecimalField(blank=True, decimal_places=9, help_text='The percent brewhouse efficiency to be \n            used for estimating the starting gravity of the beer. Not required for \n            “Extract” recipes, but is required for “Partial Mash” and “All Grain” recipes.', max_digits=14, null=True, verbose_name='efficiency')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('taste_notes', models.TextField(blank=True, null=True, verbose_name='taste notes')),
                ('taste_rating', models.DecimalField(blank=True, decimal_places=9, help_text='Number between \n            zero and 50.0 denoting the taste rating – corresponds to the 50 point\n             BJCP rating system.', max_digits=14, null=True, verbose_name='taste rating BJCP')),
                ('og', models.DecimalField(blank=True, decimal_places=9, help_text='The measured original (pre-fermentation) \n            specific gravity of the beer.', max_digits=14, null=True, verbose_name='OG')),
                ('fg', models.DecimalField(blank=True, decimal_places=9, help_text='The measured final gravity of the finished beer.', max_digits=14, null=True, verbose_name='FG')),
                ('fermentation_stages', models.PositiveSmallIntegerField(blank=True, help_text='The number of fermentation stages \n            used – typically a number between one and three', null=True, verbose_name='fermentation stages')),
                ('primary_age', models.DecimalField(blank=True, decimal_places=9, help_text='Time spent in the primary in days', max_digits=14, null=True, verbose_name='primary age (days)')),
                ('primary_temp', models.DecimalField(blank=True, decimal_places=9, help_text='Temperature in degrees Celsius for the primary fermentation', max_digits=14, null=True, verbose_name='primary temperature (Celsius)')),
                ('secondary_age', models.DecimalField(blank=True, decimal_places=9, help_text='Time spent in the secondary in days', max_digits=14, null=True, verbose_name='secondary age (days)')),
                ('secondary_temp', models.DecimalField(blank=True, decimal_places=9, help_text='Temperature in degrees Celsius for the secondary fermentation', max_digits=14, null=True, verbose_name='secondary temperature (Celsius)')),
                ('tertiary_age', models.DecimalField(blank=True, decimal_places=9, help_text='Time spent in the third fermenter in days', max_digits=14, null=True, verbose_name='tertiary age (days)')),
                ('tertiary_temp', models.DecimalField(blank=True, decimal_places=9, help_text='Temperature in the tertiary fermenter', max_digits=14, null=True, verbose_name='tertiary temperature (Celsius)')),
                ('age', models.DecimalField(blank=True, decimal_places=9, help_text='The time to age the beer in days after bottling', max_digits=14, null=True, verbose_name='age')),
                ('age_temp', models.DecimalField(blank=True, decimal_places=9, help_text='Temperature for aging the beer after bottling', max_digits=14, null=True, verbose_name='age temperature')),
                ('date', models.CharField(blank=True, help_text='Brew date in a easily recognizable format such as “3 Dec 04”.', max_length=50, null=True, verbose_name='date')),
                ('real_date', models.DateField(blank=True, help_text='Brew date in a computer-readable format', null=True, verbose_name='real date')),
                ('carbonation', models.DecimalField(blank=True, decimal_places=9, help_text='Floating point value corresponding to the \n            target volumes of CO2 used to carbonate this beer', max_digits=14, null=True, verbose_name='carbonation')),
                ('forced_carbonation', models.BooleanField(default=False, help_text='True if the batch was force carbonated using CO2 pressure, False if \n            the batch was carbonated using a priming agent', verbose_name='forced carbonation')),
                ('priming_sugar_name', models.CharField(blank=True, help_text='Text describing the priming agent such as “Honey” or \n            “Corn Sugar” – used only if this is _not_ a forced carbonation', max_length=50, null=True, verbose_name='priming sugar name')),
                ('carbonation_temp', models.DecimalField(blank=True, decimal_places=9, help_text='The temperature for either bottling or forced carbonation', max_digits=14, null=True, verbose_name='carbonation temperature (Celsius)')),
                ('priming_sugar_equiv', models.DecimalField(blank=True, decimal_places=9, help_text='Factor used to \n            convert this priming agent to an equivalent amount of corn sugar \n            for a bottled scenario. For example, “Dry Malt Extract” would have \n            a value of 1.4 because it requires 1.4 times as much DME as corn sugar \n            to carbonate. To calculate the amount of DME needed, the program can \n            calculate the amount of corn sugar needed and then multiply by this factor.', max_digits=14, null=True, verbose_name='priming sugar equivalent')),
                ('keg_priming_factor', models.DecimalField(blank=True, decimal_places=9, help_text='Used to factor in \n            the smaller amount of sugar needed for large containers. For example, \n            this might be 0.5 for a typical 5 gallon keg since naturally priming a \n            keg requires about 50% as much sugar as priming bottles', max_digits=14, null=True, verbose_name='keg priming factor')),
                ('est_og', models.CharField(blank=True, help_text='Calculated estimate of the original \n            gravity for this recipe along with the units', max_length=50, null=True, verbose_name='estimated OG')),
                ('est_fg', models.CharField(blank=True, help_text='Calculated estimate for the final specific \n            gravity of this recipe along with the units as in “1.015 sg”', max_length=50, null=True, verbose_name='estimated FG')),
                ('est_color', models.CharField(blank=True, help_text='The estimated color of the beer in user defined color units', max_length=50, null=True, verbose_name='estimated color')),
                ('ibu', models.DecimalField(blank=True, decimal_places=9, help_text='The estimated bitterness level of the beer in IBUs', max_digits=14, null=True, verbose_name='IBU')),
                ('ibu_method', models.CharField(blank=True, choices=[('rager', 'Rager'), ('tinseth', 'Tinseth'), ('garetz', 'Garetz')], help_text='May be “Rager”, “Tinseth” or “Garetz” \n            corresponding to the method/equation used to estimate IBUs for this recipe', max_length=12, null=True, verbose_name='IBU method')),
                ('est_abv', models.DecimalField(blank=True, decimal_places=9, help_text='Estimated percent alcohol by volume for this recipe', max_digits=14, null=True, verbose_name='estimated ABV')),
                ('abv', models.DecimalField(blank=True, decimal_places=9, help_text='Actual alcohol by volume calculated from the OG and FG measured', max_digits=14, null=True, verbose_name='ABV')),
                ('actual_efficiency', models.DecimalField(blank=True, decimal_places=9, help_text='The actual efficiency as calculated using the measured original and final gravity', max_digits=14, null=True, verbose_name='actual efficiency')),
                ('calories', models.CharField(blank=True, help_text='Calorie estimate based on the measured starting and ending gravity. \n            Note that calories should be quoted in “Cal” or kilocalories which is the normal \n            dietary measure (i.e. a beer is usually in the range of 100-250 calories per 12 oz). \n            Examples “180 Cal/pint”', max_length=50, null=True, verbose_name='calories')),
                ('display_batch_size', models.CharField(blank=True, help_text='Batch size in user defined units \n            along with the units as in “5.0 gal”', max_length=50, null=True, verbose_name='display batch size')),
                ('display_boil_size', models.CharField(blank=True, help_text='Boil size with user defined \n            units as in “6.3 gal”', max_length=50, null=True, verbose_name='display boil size')),
                ('display_og', models.CharField(blank=True, help_text='Measured original gravity in user defined \n            units as in “6.4 plato”', max_length=50, null=True, verbose_name='display OG')),
                ('display_fg', models.CharField(blank=True, help_text='Measured final gravity in user defined \n            units as in “1.035 sg”', max_length=50, null=True, verbose_name='display FG')),
                ('display_primary_temp', models.CharField(blank=True, help_text='Primary fermentation \n            temperature in user defined units such as “64 F”', max_length=50, null=True, verbose_name='display primary temperature')),
                ('display_secondary_temp', models.CharField(blank=True, help_text='Secondary fermentation \n            temperature in user defined units such as “56 F”', max_length=50, null=True, verbose_name='display secondary temperature')),
                ('display_tertiary_temp', models.CharField(blank=True, help_text='Tertiary temperature \n            in user defined units such as “20 C”', max_length=50, null=True, verbose_name='display tertiary temperature')),
                ('display_age_temp', models.CharField(blank=True, help_text='Temperature to use when aging the \n            beer in user units such as “55 F”', max_length=50, null=True, verbose_name='display age temperature')),
                ('carbonation_used', models.CharField(blank=True, help_text='Text description of the carbonation \n            used such as “50g corn sugar” or “Kegged at 20psi”', max_length=50, null=True, verbose_name='carbonation used')),
                ('display_carb_temp', models.CharField(blank=True, help_text='Carbonation/Bottling \n            temperature in appropriate units such as “40F” or “32C”', max_length=50, null=True, verbose_name='display carbonation temperature')),
                ('equipment', models.ForeignKey(blank=True, help_text='An equipment record is optional. If included the \n            Batch size and Boil size in the equipment record must match \n            the values in this recipe record.', null=True, on_delete=django.db.models.deletion.CASCADE, to='brewing.Equipment')),
                ('fermentables', models.ManyToManyField(blank=True, help_text='Zero or more fermentable ingredients', null=True, to='brewing.Fermentable')),
                ('hops', models.ManyToManyField(blank=True, help_text='Zero or more hop ingredients', null=True, to='brewing.Hop')),
                ('mash', models.ForeignKey(blank=True, help_text='A MASH profile record containing one or more Mash steps. \n            NOTE: No Mash record is needed for “Extract” type brews.', null=True, on_delete=django.db.models.deletion.CASCADE, to='brewing.MashProfile')),
                ('miscs', models.ManyToManyField(blank=True, help_text='Zero or more misc records', null=True, to='brewing.Misc')),
                ('modified_by', models.ForeignKey(blank=True, help_text='Modified by', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='brewing_recipe_modified_by_set', to=settings.AUTH_USER_MODEL)),
                ('registered_by', models.ForeignKey(blank=True, help_text='Registered by', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='brewing_recipe_registered_by_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RecipeOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.PositiveSmallIntegerField(choices=[(0, 'Use SI units'), (1, 'Use US traditional units'), (2, 'Use British imperial units')], default=1, help_text='Weight units for this recipe', verbose_name='weight units')),
                ('volume', models.PositiveSmallIntegerField(choices=[(0, 'Use SI units'), (1, 'Use US traditional units'), (2, 'Use British imperial units')], default=1, help_text='Volume units for this recipe', verbose_name='volume units')),
                ('temperature', models.PositiveSmallIntegerField(choices=[(0, 'Celsius'), (1, 'Fahrenheit')], default=1, help_text='Temperature units for \n            this recipe', verbose_name='temperature units')),
                ('gravity', models.PositiveSmallIntegerField(choices=[(0, '20C/20C Specific gravity'), (1, 'Plato/Brix/Bailing')], default=0, help_text='Gravity units for this recipe', verbose_name='gravity units')),
                ('color', models.PositiveSmallIntegerField(choices=[(0, 'Use SRM'), (1, 'Use EBC')], default=0, help_text='Color system for this recipe', verbose_name='color system')),
                ('color_formula', models.PositiveSmallIntegerField(choices=[(0, "Mosher's approximation"), (1, "Daniel's approximation"), (2, "Morey's approximation")], default=2, help_text='Color formula to use \n            for calculating the color for this recipe', verbose_name='color formula')),
                ('ibu_formula', models.PositiveSmallIntegerField(choices=[(0, "Tinseth's approximation"), (1, "Rager's approximation"), (2, "Garetz' approximation")], default=0, help_text='IBU formula to use for calculating IBU for this recipe', verbose_name='ibu formula')),
                ('slug', models.SlugField(blank=True, max_length=100)),
                ('cdt', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('mdt', models.DateTimeField(auto_now=True, verbose_name='modified')),
                ('modified_by', models.ForeignKey(blank=True, help_text='Modified by', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='brewing_recipeoption_modified_by_set', to=settings.AUTH_USER_MODEL)),
                ('recipe', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='brewing.Recipe')),
                ('registered_by', models.ForeignKey(blank=True, help_text='Registered by', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='brewing_recipeoption_registered_by_set', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Style',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('version', models.PositiveSmallIntegerField(default=1, editable=False, help_text='XML version', verbose_name='version')),
                ('slug', models.SlugField(blank=True, max_length=100)),
                ('cdt', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('mdt', models.DateTimeField(auto_now=True, verbose_name='modified')),
                ('category', models.CharField(help_text='Category that this style belongs to – usually \n            associated with a group of styles such as  “English Ales” or \n            “Amercian Lagers”.', max_length=100, verbose_name='category')),
                ('category_number', models.CharField(help_text='Number or identifier associated with this style category. \n            For example in the BJCP style guide, the “American Lager” category has \n            a category number of “1”.', max_length=10, verbose_name='category number')),
                ('style_letter', models.CharField(help_text='The specific style number or subcategory letter associated \n            with this particular style. For example in the BJCP style guide, an \n            American Standard Lager would be style letter “A” under the main category. \n            Letters should be upper case.', max_length=10, verbose_name='style letter (uppercase)')),
                ('style_guide', models.CharField(help_text='The name of the style guide that this particular style or \n            category belongs to. For example “BJCP” might denote the BJCP style guide, \n            and “AHA” would be used for the AHA style guide.', max_length=10, verbose_name='style guide')),
                ('style_type', models.CharField(choices=[('lager', 'Lager'), ('ale', 'Ale'), ('mead', 'Mead'), ('wheat', 'Wheat'), ('mixed', 'Mixed'), ('cider', 'Cider')], default=1, help_text='May be “Lager”, “Ale”, “Mead”, “Wheat”, “Mixed” or “Cider”. \n            Defines the type of beverage associated with this category.', max_length=12, verbose_name='type')),
                ('og_min', models.DecimalField(decimal_places=9, help_text='The minimum specific gravity as measured relative to water. \n            For example “1.040” might be a reasonable minimum for a Pale Ale.', max_digits=14, verbose_name='min OG')),
                ('og_max', models.DecimalField(decimal_places=9, help_text='The maximum specific gravity as measured relative to water.', max_digits=14, verbose_name='max OG')),
                ('fg_min', models.DecimalField(decimal_places=9, help_text='The minimum final gravity as measured relative to water.', max_digits=14, verbose_name='min FG')),
                ('fg_max', models.DecimalField(decimal_places=9, help_text='The maximum final gravity as measured relative to water.', max_digits=14, verbose_name='max FG')),
                ('ibu_min', models.DecimalField(decimal_places=9, help_text='The recommended minimum bitterness for this style as measured \n            in International Bitterness Units (IBUs)', max_digits=14, verbose_name='min IBU')),
                ('ibu_max', models.DecimalField(decimal_places=9, help_text='The recommended maximum bitterness for this style as measured \n            in International Bitterness Units (IBUs)', max_digits=14, verbose_name='max IBU')),
                ('color_min', models.DecimalField(decimal_places=9, help_text='The minimum recommended color in SRM', max_digits=14, verbose_name='min color(SRM)')),
                ('color_max', models.DecimalField(decimal_places=9, help_text='The maximum recommended color in SRM.', max_digits=14, verbose_name='max color(SRM)')),
                ('abv_min', models.DecimalField(blank=True, decimal_places=9, help_text='The minimum recommended alcohol by \n            volume as a percentage.', max_digits=14, null=True, verbose_name='min ABV %')),
                ('abv_max', models.DecimalField(blank=True, decimal_places=9, help_text='The maximum recommended alcohol by \n            volume as a percentage.', max_digits=14, null=True, verbose_name='max ABV %')),
                ('carb_min', models.DecimalField(blank=True, decimal_places=9, help_text='Minimum recommended \n            carbonation for this style in volumes of CO2', max_digits=14, null=True, verbose_name='min carb (vols of CO2)')),
                ('carb_max', models.DecimalField(blank=True, decimal_places=9, help_text='The maximum \n            recommended carbonation for this style in volumes of CO2', max_digits=14, null=True, verbose_name='max carb (vols of CO2)')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('profile', models.TextField(blank=True, help_text='Flavor and aroma profile for this style', null=True, verbose_name='profile')),
                ('ingredients', models.TextField(blank=True, help_text='Suggested ingredients for this style', null=True, verbose_name='ingredients')),
                ('examples', models.TextField(blank=True, help_text='Example beers of this style.', null=True, verbose_name='examples')),
                ('display_og_min', models.CharField(blank=True, help_text='Original gravity minimum in user \n            defined units such as “1.036 sg”', max_length=50, null=True, verbose_name='display OG minimum')),
                ('display_og_max', models.CharField(blank=True, help_text='Original gravity max in user \n            defined units such as “1.056 sg”', max_length=50, null=True, verbose_name='display OG maximum')),
                ('display_fg_min', models.CharField(blank=True, help_text='Final gravity minimum in user \n            defined units such as “1.010 sg”', max_length=50, null=True, verbose_name='display FG minimum')),
                ('display_fg_max', models.CharField(blank=True, help_text='Final gravity maximum in user \n            defined units such as “1.019 sg”', max_length=50, null=True, verbose_name='display FG maximum')),
                ('display_color_min', models.CharField(blank=True, help_text='Minimum color in user defined units \n            such as “30 srm”', max_length=50, null=True, verbose_name='display color minimum')),
                ('display_color_max', models.CharField(blank=True, help_text='Maximum color in user defined units \n            such as “20 srm”', max_length=50, null=True, verbose_name='display color maximum')),
                ('og_range', models.CharField(blank=True, help_text='Original gravity range for the style such as “1.030-1.040 sg”', max_length=50, null=True, verbose_name='OG range')),
                ('fg_range', models.CharField(blank=True, help_text='Final gravity range such as “1.010-1.015 sg”', max_length=50, null=True, verbose_name='FG range')),
                ('ibu_range', models.CharField(blank=True, help_text='Bitterness range in IBUs such as “10-20 IBU”', max_length=50, null=True, verbose_name='IBU range')),
                ('carb_range', models.CharField(blank=True, help_text='Carbonation range in volumes such as “2.0-2.6 vols”', max_length=50, null=True, verbose_name='carbonation range')),
                ('color_range', models.CharField(blank=True, help_text='Color range such as “10-20 SRM”', max_length=50, null=True, verbose_name='color range')),
                ('abv_range', models.CharField(blank=True, help_text='ABV Range for this style such as “4.5-5.5%”', max_length=50, null=True, verbose_name='ABV range')),
                ('modified_by', models.ForeignKey(blank=True, help_text='Modified by', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='brewing_style_modified_by_set', to=settings.AUTH_USER_MODEL)),
                ('registered_by', models.ForeignKey(blank=True, help_text='Registered by', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='brewing_style_registered_by_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Water',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('version', models.PositiveSmallIntegerField(default=1, editable=False, help_text='XML version', verbose_name='version')),
                ('slug', models.SlugField(blank=True, max_length=100)),
                ('cdt', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('mdt', models.DateTimeField(auto_now=True, verbose_name='modified')),
                ('amount', models.DecimalField(decimal_places=9, help_text='Volume of water to use in a recipe in liters.', max_digits=14, verbose_name='amount')),
                ('calcium', models.DecimalField(decimal_places=9, help_text='The amount of calcium (Ca) in parts per million.', max_digits=14, verbose_name='calcium')),
                ('bicarbonate', models.DecimalField(decimal_places=9, help_text='The amount of bicarbonate (HCO3) in parts per million.', max_digits=14, verbose_name='bicarbonate')),
                ('sulfate', models.DecimalField(decimal_places=9, help_text='The amount of Sulfate (SO4) in parts per million.', max_digits=14, verbose_name='sulfate')),
                ('chloride', models.DecimalField(decimal_places=9, help_text='The amount of Chloride (Cl) in parts per million.', max_digits=14, verbose_name='chloride')),
                ('sodium', models.DecimalField(decimal_places=9, help_text='The amount of Sodium (Na) in parts per million.', max_digits=14, verbose_name='sodium')),
                ('magnesium', models.DecimalField(decimal_places=9, help_text='The amount of Magnesium (Mg) in parts per million.', max_digits=14, verbose_name='magnesium')),
                ('ph', models.DecimalField(blank=True, decimal_places=9, help_text='The PH value of the water', max_digits=14, null=True, verbose_name='PH')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('display_amount', models.CharField(blank=True, help_text='The amount of water in this \n            record along with the units formatted for easy display in the \n            current user defined units. For example “5.0 gal” or “20.0 l”.', max_length=50, null=True, verbose_name='display amount')),
                ('modified_by', models.ForeignKey(blank=True, help_text='Modified by', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='brewing_water_modified_by_set', to=settings.AUTH_USER_MODEL)),
                ('registered_by', models.ForeignKey(blank=True, help_text='Registered by', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='brewing_water_registered_by_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Yeast',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('version', models.PositiveSmallIntegerField(default=1, editable=False, help_text='XML version', verbose_name='version')),
                ('slug', models.SlugField(blank=True, max_length=100)),
                ('cdt', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('mdt', models.DateTimeField(auto_now=True, verbose_name='modified')),
                ('yiest_type', models.CharField(choices=[('ale', 'Ale'), ('lager', 'Lager'), ('wheat', 'Wheat'), ('wine', 'Wine'), ('champagne', 'Champagne')], default=1, max_length=12, verbose_name='yeast type')),
                ('form', models.CharField(choices=[('liquid', 'Liquid'), ('dry', 'Dry'), ('slant', 'Slant'), ('culture', 'Culture')], default=1, max_length=12, verbose_name='yeast form')),
                ('amount', models.DecimalField(decimal_places=9, help_text='The amount of yeast, measured in liters. For a starter this is the \n            size of the starter. If the flag AMOUNT_IS_WEIGHT is set to TRUE then this \n            measurement is in kilograms and not liters.', max_digits=14, verbose_name='amount')),
                ('amount_is_weight', models.BooleanField(default=False, help_text='TRUE if the amount measurement is a weight measurement and FALSE \n            if the amount is a volume measurement.  Default value (if not present) is \n            assumed to be FALSE – therefore the yeast measurement is a liquid amount \n            by default.', verbose_name='amount is weight or litres')),
                ('laboratory', models.CharField(blank=True, max_length=100, null=True, verbose_name='laboratory name')),
                ('product_id', models.CharField(blank=True, help_text='The manufacturer’s product ID label or number that identifies this \n            particular strain of yeast.', max_length=100, null=True, verbose_name='product id')),
                ('min_temperature', models.DecimalField(blank=True, decimal_places=9, help_text='The minimum \n            recommended temperature for fermenting this yeast strain in degrees \n            Celsius.', max_digits=14, null=True, verbose_name='min temperature')),
                ('max_temperature', models.DecimalField(blank=True, decimal_places=9, help_text='The maximum \n            recommended temperature for fermenting this yeast strain in Celsius.', max_digits=14, null=True, verbose_name='max temperature')),
                ('flocculation', models.CharField(blank=True, choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('very high', 'Very high')], default=1, max_length=12, null=True, verbose_name='yeast form')),
                ('attenuation', models.DecimalField(blank=True, decimal_places=9, help_text='Average \n            attenuation for this yeast strain.', max_digits=14, null=True, verbose_name='attenuation percentage')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('best_for', models.TextField(blank=True, help_text='Styles or types of beer this yeast strain is best suited for.', null=True, verbose_name='best for')),
                ('times_cultured', models.PositiveSmallIntegerField(blank=True, help_text='Number of times this yeast has \n            been reused as a harvested culture. This number should be zero if this \n            is a product directly from the manufacturer.', null=True, verbose_name='times recultured')),
                ('max_reuse', models.PositiveSmallIntegerField(blank=True, help_text='Recommended of times this yeast can be reused \n            (recultured from a previous batch)', null=True, verbose_name='max recultures')),
                ('add_to_secondary', models.BooleanField(default=False, help_text='Flag denoting that this yeast was added for a secondary (or later) \n            fermentation as opposed to the primary fermentation. Useful if one uses two              \n            or more yeast strains for a single brew (eg: Lambic). Default value is FALSE.', verbose_name='amount is weight')),
                ('display_amount', models.CharField(blank=True, help_text='The amount of yeast or starter in this record along with the units \n            formatted for easy display in the current user defined units. For example “1.5 oz” \n            or “100 g”.', max_length=50, null=True, verbose_name='display amount')),
                ('disp_min_temp', models.CharField(blank=True, help_text='Minimum fermentation temperature converted to current user \n            units along with the units. For example “54.0 F” or “24.2 C”', max_length=50, null=True, verbose_name='display minimum temperature')),
                ('disp_max_temp', models.CharField(blank=True, help_text='Maximum fermentation temperature converted to current \n            user units along with the units. For example “54.0 F” or “24.2 C”', max_length=50, null=True, verbose_name='display minimum temperature')),
                ('inventory', models.CharField(blank=True, help_text='Amount in inventory for this hop along with the units – for example “10.0 pkgs”', max_length=50, null=True, verbose_name='inventory')),
                ('culture_date', models.CharField(blank=True, help_text='Date sample was last cultured in a neutral date form such as “10 Dec 04”', max_length=50, null=True, verbose_name='inventory')),
                ('modified_by', models.ForeignKey(blank=True, help_text='Modified by', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='brewing_yeast_modified_by_set', to=settings.AUTH_USER_MODEL)),
                ('registered_by', models.ForeignKey(blank=True, help_text='Registered by', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='brewing_yeast_registered_by_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='recipe',
            name='style',
            field=models.ForeignKey(help_text='The style of the \n            beer this recipe is associated with.', null=True, on_delete=django.db.models.deletion.CASCADE, to='brewing.Style'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='waters',
            field=models.ManyToManyField(blank=True, help_text='Zero or more water records', null=True, to='brewing.Water'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='yeasts',
            field=models.ManyToManyField(blank=True, help_text='Zero or more yeast records', null=True, to='brewing.Yeast'),
        ),
        migrations.AddField(
            model_name='mashprofile',
            name='mash_steps',
            field=models.ManyToManyField(to='brewing.MashStep'),
        ),
        migrations.AddField(
            model_name='mashprofile',
            name='modified_by',
            field=models.ForeignKey(blank=True, help_text='Modified by', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='brewing_mashprofile_modified_by_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='mashprofile',
            name='registered_by',
            field=models.ForeignKey(blank=True, help_text='Registered by', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='brewing_mashprofile_registered_by_set', to=settings.AUTH_USER_MODEL),
        ),
    ]
